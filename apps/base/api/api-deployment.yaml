apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-app
  namespace: production
  labels:
    app: api-app
    component: backend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: api-app
  template:
    metadata:
      labels:
        app: api-app
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      #      initContainers:
      #        - name: wait-for-db
      #          image: busybox:1.36
      #          command:
      #            - sh
      #            - -c
      #            - |
      #              echo "Waiting for PostgreSQL to be ready..."
      #              until nc -z postgres.production.svc.cluster.local 5432; do
      #                echo "PostgreSQL is unavailable - sleeping"
      #                sleep 2
      #              done
      #              echo "PostgreSQL is ready!"
      #          resources:
      #            requests:
      #              memory: "32Mi"
      #              cpu: "50m"
      #            limits:
      #              memory: "64Mi"
      #              cpu: "100m"
      containers:
        - name: api-app
          image: dbunt1tled/test_docker:v1.0.7 # {"$imagepolicy": "flux-system:api-app-policy"}
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          envFrom:
            - configMapRef:
                name: api-config
            - secretRef:
                name: postgres-credentials
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          startupProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 12
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
